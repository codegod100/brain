import { Button, LineEdit, ScrollView } from "std-widgets.slint";

component ActionButton inherits Button {
    horizontal-stretch: 1;
    preferred-height: 36px;
}

component TextInput inherits LineEdit {
    horizontal-stretch: 1;
    preferred-height: 32px;
}

component SectionLabel inherits Text {
    font-weight: 600;
    color: #e0e0e0;
}

export component AppWindow inherits Window {
    preferred-width: 900px;
    preferred-height: 600px;
    title: "Brain Hub (Slint)";
    in property <string> status_text: "Status: pending...";
    in-out property <[string]> log_entries;
    in-out property <[string]> audio_files;
    in-out property <string> command_text;
    in-out property <string> play_text;
    in-out property <string> broadcast_text;
    in-out property <string> upload_name_text;
    in-out property <int> log_force_rev: 0;

    // Apply requested scroll formula whenever log_force_rev changes
    changed log_force_rev => {
        // Scroll to bottom: viewport-y = min(0px, -viewport-height + visible-height)
        log_view.viewport-y = min(0px, -log_view.viewport-height + log_view.height);
    }
    

    callback refresh_status();
    callback fetch_files();
    callback show_peers();
    callback send_command(string);
    callback play_audio(string);
    callback broadcast_message(string);
    callback broadcast_play(string);
    callback choose_file();
    callback upload_file(string);
    callback audio_file_clicked(string);

    VerticalLayout {
        spacing: 8px;
        padding: 12px;

        if root.width < 640px: VerticalLayout {
            spacing: 10px;
            SectionLabel { text: root.status_text; wrap: TextWrap.word-wrap; }
            ActionButton { text: "Refresh Status"; clicked => { root.refresh_status(); } }
            HorizontalLayout {
                spacing: 6px;
                ActionButton { text: "List Files"; clicked => { root.fetch_files(); } }
                ActionButton { text: "Show Peers"; clicked => { root.show_peers(); } }
            }
        }
        if root.width >= 640px: VerticalLayout {
            spacing: 6px;
            HorizontalLayout {
                spacing: 8px;
                SectionLabel { text: root.status_text; horizontal-stretch: 1; }
                ActionButton { text: "Refresh Status"; clicked => { root.refresh_status(); } }
            }
            HorizontalLayout {
                spacing: 8px;
                ActionButton { text: "List Files"; clicked => { root.fetch_files(); } }
                ActionButton { text: "Show Peers"; clicked => { root.show_peers(); } }
            }
        }

        Rectangle { height: 1px; background: #303030; horizontal-stretch: 1; }

        if root.width < 640px: VerticalLayout {
            spacing: 6px;
            SectionLabel { text: "Command"; }
            TextInput { text <=> root.command_text; placeholder-text: "run command"; }
            ActionButton {
                text: "Send";
                clicked => { root.send_command(root.command_text); }
            }
        }
        if root.width >= 640px: HorizontalLayout {
            spacing: 8px;
            SectionLabel { text: "Command"; }
            TextInput { text <=> root.command_text; }
            ActionButton {
                text: "Send";
                clicked => { root.send_command(root.command_text); }
            }
        }

        if root.width < 640px: VerticalLayout {
            spacing: 6px;
            SectionLabel { text: "Play Filename"; }
            TextInput { text <=> root.play_text; placeholder-text: "track.wav"; }
            ActionButton {
                text: "Play";
                clicked => { root.play_audio(root.play_text); }
            }
        }
        if root.width >= 640px: HorizontalLayout {
            spacing: 8px;
            SectionLabel { text: "Play Filename"; }
            TextInput { text <=> root.play_text; }
            ActionButton {
                text: "Play";
                clicked => { root.play_audio(root.play_text); }
            }
        }

        if root.width < 640px: VerticalLayout {
            spacing: 6px;
            SectionLabel { text: "Broadcast"; }
            TextInput { text <=> root.broadcast_text; placeholder-text: "message"; }
            HorizontalLayout {
                spacing: 6px;
                ActionButton { text: "Broadcast"; clicked => { root.broadcast_message(root.broadcast_text); } }
                ActionButton { text: "Play Remotely"; clicked => { root.broadcast_play(root.play_text); } }
            }
        }
        if root.width >= 640px: HorizontalLayout {
            spacing: 8px;
            SectionLabel { text: "Broadcast"; }
            TextInput { text <=> root.broadcast_text; }
            ActionButton {
                text: "Broadcast";
                clicked => { root.broadcast_message(root.broadcast_text); }
            }
            ActionButton {
                text: "Play Remotely";
                clicked => { root.broadcast_play(root.play_text); }
            }
        }

        if root.width < 640px: VerticalLayout {
            spacing: 6px;
            SectionLabel { text: "Upload"; }
            ActionButton {
                text: "Choose File";
                clicked => { root.choose_file(); }
            }
            TextInput { text <=> root.upload_name_text; placeholder-text: "remote name"; }
            ActionButton {
                text: "Upload";
                clicked => { root.upload_file(root.upload_name_text); }
            }
        }
        if root.width >= 640px: HorizontalLayout {
            spacing: 8px;
            SectionLabel { text: "Upload"; }
            ActionButton { text: "Choose File"; clicked => { root.choose_file(); } }
            TextInput { text <=> root.upload_name_text; }
            ActionButton {
                text: "Upload";
                clicked => { root.upload_file(root.upload_name_text); }
            }
        }

        Text { text: "Remote Audio Files"; font-weight: 600; }
        ScrollView {
            height: 160px;
            horizontal-stretch: 1;

            VerticalLayout {
                spacing: 6px;
                for file[i] in root.audio_files: Button {
                    text: file;
                    horizontal-stretch: 1;
                    clicked => { root.audio_file_clicked(file); }
                }
            }
        }

        Text { text: "Event Log"; font-weight: 600; }
        log_view := ScrollView {
            horizontal-stretch: 1;
            vertical-stretch: 1;
            VerticalLayout {
                spacing: 2px;
                for line[i] in root.log_entries: Text { text: line; }
            }
        }
    }

    
}
